{
  description = "Your new nix config";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    home-manager.url = "github:nix-community/home-manager/release-25.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    zen-browser = {
      url = "github:0xc000022070/zen-browser-flake";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    hyprland.url = "github:hyprwm/Hyprland";
  };

  outputs = {
    self,
    nixpkgs,
    home-manager,
    zen-browser,
    ...
  } @ inputs: let
    inherit (self) outputs;
    # Supported systems for your flake packages, shell, etc.
    systems = [
      "aarch64-linux"
      "i686-linux"
      "x86_64-linux"
      "aarch64-darwin"
      "x86_64-darwin"
    ];
    # This is a function that generates an attribute by calling a function you
    # pass to it, with each system as an argument
    forAllSystems = nixpkgs.lib.genAttrs systems;
  in {
    # NixOS configuration entrypoint
    # Available through 'nixos-rebuild --flake .#your-hostname'
    nixosConfigurations = {
      starcraft = nixpkgs.lib.nixosSystem {
        specialArgs = {inherit inputs outputs;};
        modules = [
          (
            # Edit this configuration file to define what should be installed on
            # your system.  Help is available in the configuration.nix(5) man page
            # and in the NixOS manual (accessible by running ‘nixos-help’).

            { inputs, config, pkgs, ... }:

            {
              imports =
                [ # Include the results of the hardware scan.
                  inputs.home-manager.nixosModules.home-manager
                  (
                    # Do not modify this file!  It was generated by ‘nixos-generate-config’
                    # and may be overwritten by future invocations.  Please make changes
                    # to /etc/nixos/configuration.nix instead.
                    { config, lib, pkgs, modulesPath, ... }:

                    {
                      imports =
                        [ (modulesPath + "/installer/scan/not-detected.nix")
                        ];

                      boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" ];
                      boot.initrd.kernelModules = [ ];
                      boot.kernelModules = [ "kvm-intel" ];
                      boot.extraModulePackages = [ ];

                      fileSystems."/" =
                        { device = "/dev/disk/by-uuid/8395d266-34b4-4766-91b3-c65ac1c9d38a";
                          fsType = "ext4";
                        };

                      boot.initrd.luks.devices."luks-30ad9281-c7e2-4abf-ae98-569840c2106e".device = "/dev/disk/by-uuid/30ad9281-c7e2-4abf-ae98-569840c2106e";

                      fileSystems."/boot" =
                        { device = "/dev/disk/by-uuid/62FE-0157";
                          fsType = "vfat";
                          options = [ "fmask=0077" "dmask=0077" ];
                        };

                      swapDevices =
                        [ { device = "/dev/disk/by-uuid/d9186e24-8c67-4e27-82d8-b41dee8c3dd9"; }
                        ];

                      # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
                      # (the default) this is the recommended approach. When using systemd-networkd it's
                      # still possible to use this option, but it's recommended to use it in conjunction
                      # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
                      networking.useDHCP = lib.mkDefault true;
                      # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

                      nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
                      hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
                    }
                  )
                ];

              # Bootloader.
              boot.loader.systemd-boot.enable = true;
              boot.loader.efi.canTouchEfiVariables = true;

              boot.initrd.luks.devices."luks-e99ba237-093b-4b05-96f6-e0fb4d270859".device = "/dev/disk/by-uuid/e99ba237-093b-4b05-96f6-e0fb4d270859";
              networking.hostName = "nixos"; # Define your hostname.
              # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

              # Configure network proxy if necessary
              # networking.proxy.default = "http://user:password@proxy:port/";
              # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

              # Enable networking
              networking.networkmanager.enable = true;

              # Set your time zone.
              time.timeZone = "America/New_York";

              # Select internationalisation properties.
              i18n.defaultLocale = "en_US.UTF-8";

              i18n.extraLocaleSettings = {
                LC_ADDRESS = "en_US.UTF-8";
                LC_IDENTIFICATION = "en_US.UTF-8";
                LC_MEASUREMENT = "en_US.UTF-8";
                LC_MONETARY = "en_US.UTF-8";
                LC_NAME = "en_US.UTF-8";
                LC_NUMERIC = "en_US.UTF-8";
                LC_PAPER = "en_US.UTF-8";
                LC_TELEPHONE = "en_US.UTF-8";
                LC_TIME = "en_US.UTF-8";
              };

              nix.settings = {
                substituters = ["https://hyprland.cachix.org"];
                trusted-substituters = ["https://hyprland.cachix.org"];
                trusted-public-keys = ["hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="];
                experimental-features = [ "nix-command" "flakes" ];
              };

              # Configure keymap in X11
              services.xserver.xkb = {
                layout = "us";
                variant = "";
              };

              # Enable CUPS to print documents.
              services.printing.enable = true;

              # Enable sound with pipewire.
              services.pulseaudio.enable = false;
              security.rtkit.enable = true;
              services.pipewire = {
                enable = true;
                alsa.enable = true;
                alsa.support32Bit = true;
                pulse.enable = true;
                # If you want to use JACK applications, uncomment this
                #jack.enable = true;

                # use the example session manager (no others are packaged yet so this is enabled by default,
                # no need to redefine it in your config for now)
                #media-session.enable = true;
              };

              services.greetd = {
                enable = true;
                settings = {
                  default_session = {
                    command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --cmd Hyprland";
                    user = "greeter";
                  };
                };
              };

              home-manager = {
                extraSpecialArgs = { inherit inputs outputs; };
                backupFileExtension = "backup";
                users = {
                  john = (
                    # This is your home-manager configuration file
                    # Use this to configure your home environment (it replaces ~/.config/nixpkgs/home.nix)
                    {
                      inputs,
                      outputs,
                      lib,
                      config,
                      pkgs,
                      ...
                    }: {
                      # You can import other home-manager modules here
                      imports = [
                        # If you want to use modules your own flake exports (from modules/home-manager):
                        # outputs.homeManagerModules.example

                        # Or modules exported from other flakes (such as nix-colors):
                        # inputs.nix-colors.homeManagerModules.default

                        # You can also split up your configuration and import pieces of it here:
                        # ./nvim.nix
                        inputs.zen-browser.homeModules.beta
                      ];

                      nixpkgs = {
                        # You can add overlays here
                        overlays = [
                          # You can also add overlays exported from other flakes:
                          # neovim-nightly-overlay.overlays.default

                          # Or define it inline, for example:
                          # (final: prev: {
                          #   hi = final.hello.overrideAttrs (oldAttrs: {
                          #     patches = [ ./change-hello-to-hi.patch ];
                          #   });
                          # })
                        ];
                        # Configure your nixpkgs instance
                        config = {
                          # Disable if you don't want unfree packages
                          allowUnfree = true;
                        };
                      };
                      
                      services.wpaperd = {
                        enable = true;
                        settings = {
                          default = {
                            duration = "30m";
                            path = "/home/john/Wallpapers";
                          };
                        };
                      };

                      # TODO: Set your username
                      home = {
                        username = "john";
                        homeDirectory = "/home/john";
                      };

                      # Add stuff for your user as you see fit:
                      # programs.neovim.enable = true;
                      # home.packages = with pkgs; [ steam ];

                      # Enable home-manager and git
                      programs.home-manager.enable = true;
                      programs.git = {
                        enable = true;
                        extraConfig.user = {
                          name = "chanceycode";
                          email = "139152739+chanceycode@users.noreply.github.com";
                        };
                      };
                      programs.zen-browser = {
                        enable = true;
                        policies = {
                          DisableAppUpdate = true;
                          DisableTelemetry = true;
                          # find more options here: https://mozilla.github.io/policy-templates/
                        };
                      };

                      wayland.windowManager.hyprland.enable = true;
                      wayland.windowManager.hyprland.settings = {

                        # #######################################################################################
                        # AUTOGENERATED HYPRLAND CONFIG.
                        # PLEASE USE THE CONFIG PROVIDED IN THE GIT REPO /examples/hyprland.conf AND EDIT IT,
                        # OR EDIT THIS ONE ACCORDING TO THE WIKI INSTRUCTIONS.
                        # #######################################################################################
                        
                        # This is an example Hyprland config file.
                        # Refer to the wiki for more information.
                        # https://wiki.hyprland.org/Configuring/
      
                        # Please note not all available settings / options are set here.
                        # For a full list, see the wiki
      
                        # You can split this configuration into multiple files
                        # Create your files separately and then link them to this file like this:
                        # source = ~/.config/hypr/myColors.conf
      
      
                        ################
                        ### MONITORS ###
                        ################
      
                        # See https://wiki.hyprland.org/Configuring/Monitors/
                        monitor = ",preferred,auto,auto";
      
      
                        ###################
                        ### MY PROGRAMS ###
                        ###################
      
                        # See https://wiki.hyprland.org/Configuring/Keywords/
      
                        # Set programs that you use
                        "$terminal" = "kitty";
                        "$fileManager" = "dolphin";
                        "$menu" = "wofi --show drun";
      
      
                        #################
                        ### AUTOSTART ###
                        #################
      
                        # Autostart necessary processes (like notifications daemons, status bars, etc.)
                        # Or execute your favorite apps at launch like this:
      
                        # exec-once = $terminal
                        # exec-once = nm-applet &
                        # exec-once = waybar & hyprpaper & firefox
                        exec-once = "wpaperd -d";
      
      
                        #############################
                        ### ENVIRONMENT VARIABLES ###
                        #############################
      
                        # See https://wiki.hyprland.org/Configuring/Environment-variables/
      
                        env = ["XCURSOR_SIZE,24" "HYPRCURSOR_SIZE,24"];
      
      
                        ###################
                        ### PERMISSIONS ###
                        ###################
      
                        # See https://wiki.hyprland.org/Configuring/Permissions/
                        # Please note permission changes here require a Hyprland restart and are not applied on-the-fly
                        # for security reasons
      
                        # ecosystem {
                        #   enforce_permissions = 1
                        # }
      
                        # permission = /usr/(bin|local/bin)/grim, screencopy, allow
                        # permission = /usr/(lib|libexec|lib64)/xdg-desktop-portal-hyprland, screencopy, allow
                        # permission = /usr/(bin|local/bin)/hyprpm, plugin, allow
      
      
                        #####################
                        ### LOOK AND FEEL ###
                        #####################
      
                        # Refer to https://wiki.hyprland.org/Configuring/Variables/
      
                        # https://wiki.hyprland.org/Configuring/Variables/#general
                        general = {
                            gaps_in = 5;
                            gaps_out = 20;
      
                            border_size = 2;
      
                            # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
                            "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
                            "col.inactive_border" = "rgba(595959aa)";
      
                            # Set to true enable resizing windows by clicking and dragging on borders and gaps
                            resize_on_border = false;
      
                            # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
                            allow_tearing = false;
      
                            layout = "dwindle";
                        };
      
                        # https://wiki.hyprland.org/Configuring/Variables/#decoration
                        decoration = {
                            rounding = 10;
                            rounding_power = 2;
      
                            # Change transparency of focused and unfocused windows
                            active_opacity = 1.0;
                            inactive_opacity = 1.0;
      
                            shadow = {
                              enabled = true;
                              range = 4;
                              render_power = 3;
                              color = "rgba(1a1a1aee)";
                            };
      
                            # https://wiki.hyprland.org/Configuring/Variables/#blur
                            blur = {
                                enabled = true;
                                size = 3;
                                passes = 1;
      
                                vibrancy = 0.1696;
                            };
                        };
      
                        # https://wiki.hyprland.org/Configuring/Variables/#animations
                        animations = {
                            enabled = "yes, please :)";
      
                            # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more
      
                            bezier = [
                              "easeOutQuint,0.23,1,0.32,1"
                              "easeInOutCubic,0.65,0.05,0.36,1"
                              "linear,0,0,1,1"
                              "almostLinear,0.5,0.5,0.75,1.0"
                              "quick,0.15,0,0.1,1"
                            ];
      
                            animation = [
                              "global, 1, 10, default"
                              "border, 1, 5.39, easeOutQuint"
                              "windows, 1, 4.79, easeOutQuint"
                              "windowsIn, 1, 4.1, easeOutQuint, popin 87%"
                              "windowsOut, 1, 1.49, linear, popin 87%"
                              "fadeIn, 1, 1.73, almostLinear"
                              "fadeOut, 1, 1.46, almostLinear"
                              "fade, 1, 3.03, quick"
                              "layers, 1, 3.81, easeOutQuint"
                              "layersIn, 1, 4, easeOutQuint, fade"
                              "layersOut, 1, 1.5, linear, fade"
                              "fadeLayersIn, 1, 1.79, almostLinear"
                              "fadeLayersOut, 1, 1.39, almostLinear"
                              "workspaces, 1, 1.94, almostLinear, fade"
                              "workspacesIn, 1, 1.21, almostLinear, fade"
                              "workspacesOut, 1, 1.94, almostLinear, fade"
                            ];
                        };
      
                        # Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
                        # "Smart gaps" / "No gaps when only"
                        # uncomment all if you wish to use that.
                        # workspace = w[tv1], gapsout:0, gapsin:0
                        # workspace = f[1], gapsout:0, gapsin:0
                        # windowrule = bordersize 0, floating:0, onworkspace:w[tv1]
                        # windowrule = rounding 0, floating:0, onworkspace:w[tv1]
                        # windowrule = bordersize 0, floating:0, onworkspace:f[1]
                        # windowrule = rounding 0, floating:0, onworkspace:f[1]
      
                        # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
                        dwindle = {
                            pseudotile = true; # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
                            preserve_split = true; # You probably want this
                        };
      
                        # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
                        master = {
                            new_status = "master";
                        };
      
                        # https://wiki.hyprland.org/Configuring/Variables/#misc
                        misc = {
                            force_default_wallpaper = 1; # Set to 0 or 1 to disable the anime mascot wallpapers
                            disable_hyprland_logo = true; # If true disables the random hyprland logo / anime girl background. :(
                        };
      
      
                        #############
                        ### INPUT ###
                        #############
      
                        # https://wiki.hyprland.org/Configuring/Variables/#input
                        input = {
                            kb_layout = "us";
                            follow_mouse = 1;
      
                            sensitivity = 0; # -1.0 - 1.0, 0 means no modification.
      
                            touchpad = {
                                natural_scroll = false;
                            };
                        };
      
                        # https://wiki.hyprland.org/Configuring/Variables/#gestures
                        gestures = {
                            workspace_swipe = false;
                        };
      
                        # Example per-device config
                        # See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
                        device = {
                            name = "epic-mouse-v1";
                            sensitivity = -0.5;
                        };
      
      
                        ###################
                        ### KEYBINDINGS ###
                        ###################
      
                        # See https://wiki.hyprland.org/Configuring/Keywords/
                        "$mainMod" = "SUPER"; # Sets "Windows" key as main modifier
      
                        # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
                        bind = [
                          "$mainMod, Q, exec, $terminal"
                          "$mainMod, C, killactive,"
                          "$mainMod, M, exit,"
                          "$mainMod, E, exec, $fileManager"
                          "$mainMod, V, togglefloating,"
                          "$mainMod, R, exec, $menu"
                          "$mainMod, P, pseudo," # dwindle
                          "$mainMod, J, togglesplit," # dwindle
      
                          # Move focus with mainMod + arrow keys
                          "$mainMod, left, movefocus, l"
                          "$mainMod, right, movefocus, r"
                          "$mainMod, up, movefocus, u"
                          "$mainMod, down, movefocus, d"
      
                        # Switch workspaces with mainMod + [0-9]
                          "$mainMod, 1, workspace, 1"
                          "$mainMod, 2, workspace, 2"
                          "$mainMod, 3, workspace, 3"
                          "$mainMod, 4, workspace, 4"
                          "$mainMod, 5, workspace, 5"
                          "$mainMod, 6, workspace, 6"
                          "$mainMod, 7, workspace, 7"
                          "$mainMod, 8, workspace, 8"
                          "$mainMod, 9, workspace, 9"
                          "$mainMod, 0, workspace, 10"
      
                        # Move active window to a workspace with mainMod + SHIFT + [0-9]
                          "$mainMod SHIFT, 1, movetoworkspace, 1"
                          "$mainMod SHIFT, 2, movetoworkspace, 2"
                          "$mainMod SHIFT, 3, movetoworkspace, 3"
                          "$mainMod SHIFT, 4, movetoworkspace, 4"
                          "$mainMod SHIFT, 5, movetoworkspace, 5"
                          "$mainMod SHIFT, 6, movetoworkspace, 6"
                          "$mainMod SHIFT, 7, movetoworkspace, 7"
                          "$mainMod SHIFT, 8, movetoworkspace, 8"
                          "$mainMod SHIFT, 9, movetoworkspace, 9"
                          "$mainMod SHIFT, 0, movetoworkspace, 10"
      
                        # Example special workspace (scratchpad)
                          "$mainMod, S, togglespecialworkspace, magic"
                          "$mainMod SHIFT, S, movetoworkspace, special:magic"
      
                        # Scroll through existing workspaces with mainMod + scroll
                          "$mainMod, mouse_down, workspace, e+1"
                          "$mainMod, mouse_up, workspace, e-1"
      
                        # Move/resize windows with mainMod + LMB/RMB and dragging
                          "$mainMod, mouse:272, movewindow"
                          # "$mainMod, mouse:273, resizewindow"
                        ];
      
                        # Laptop multimedia keys for volume and LCD brightness
                        bindel = [
                          ",XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+"
                          ",XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
                          ",XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
                          ",XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
                          ",XF86MonBrightnessUp, exec, brightnessctl -e4 -n2 set 5%+"
                          ",XF86MonBrightnessDown, exec, brightnessctl -e4 -n2 set 5%-"
      
                        # Requires playerctl
                          ", XF86AudioNext, exec, playerctl next"
                          ", XF86AudioPause, exec, playerctl play-pause"
                          ", XF86AudioPlay, exec, playerctl play-pause"
                          ", XF86AudioPrev, exec, playerctl previous"
                        ];
      
                        ##############################
                        ### WINDOWS AND WORKSPACES ###
                        ##############################
      
                        # See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
                        # See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules
      
                        # Example windowrule
                        # windowrule = float,class:^(kitty)$,title:^(kitty)$
      
                        # Ignore maximize requests from apps. You'll probably like this.
                        windowrule = [
                          "suppressevent maximize, class:.*"
      
                        # Fix some dragging issues with XWayland
                          "nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0"
                        ];

                      };

                      # Nicely reload system units when changing configs
                      systemd.user.startServices = "sd-switch";

                      # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
                      home.stateVersion = "25.05";
                    }
                  );
                };
              };

              # Enable touchpad support (enabled default in most desktopManager).
              # services.xserver.libinput.enable = true;

              # Define a user account. Don't forget to set a password with ‘passwd’.
              users.users.john = {
                isNormalUser = true;
                description = "john";
                extraGroups = [ "networkmanager" "wheel" ];
                packages = with pkgs; [
                  wofi
                  kitty
                  proton-pass
                  code-cursor
                ];
              };

              programs.hyprland = {
                enable = true;
                # set the flake package
                package = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.hyprland;
                # make sure to also set the portal package, so that they are in sync
                portalPackage = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.xdg-desktop-portal-hyprland;
              };

              # Install firefox.
              programs.firefox.enable = true;

              # Allow unfree packages
              nixpkgs.config.allowUnfree = true;

              # List packages installed in system profile. To search, run:
              # $ nix search wget
              environment.systemPackages = with pkgs; [
              #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
              #  wget
              ];

              # Some programs need SUID wrappers, can be configured further or are
              # started in user sessions.
              # programs.mtr.enable = true;
              # programs.gnupg.agent = {
              #   enable = true;
              #   enableSSHSupport = true;
              # };

              # List services that you want to enable:

              # Enable the OpenSSH daemon.
              # services.openssh.enable = true;

              # Open ports in the firewall.
              # networking.firewall.allowedTCPPorts = [ ... ];
              # networking.firewall.allowedUDPPorts = [ ... ];
              # Or disable the firewall altogether.
              # networking.firewall.enable = false;

              # This value determines the NixOS release from which the default
              # settings for stateful data, like file locations and database versions
              # on your system were taken. It‘s perfectly fine and recommended to leave
              # this value at the release version of the first install of this system.
              # Before changing this value read the documentation for this option
              # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
              system.stateVersion = "25.05"; # Did you read the comment?
            }
          )
        ];
      };
    };
  };
}