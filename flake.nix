{
  description = "Your new nix config";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    home-manager.url = "github:nix-community/home-manager/release-25.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    zen-browser = {
      url = "github:0xc000022070/zen-browser-flake";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    hyprland.url = "github:hyprwm/Hyprland";
  };

  outputs = {
    self,
    nixpkgs,
    home-manager,
    zen-browser,
    ...
  } @ inputs: let
    inherit (self) outputs;
    # Supported systems for your flake packages, shell, etc.
    systems = [
      "aarch64-linux"
      "i686-linux"
      "x86_64-linux"
      "aarch64-darwin"
      "x86_64-darwin"
    ];
    # This is a function that generates an attribute by calling a function you
    # pass to it, with each system as an argument
    forAllSystems = nixpkgs.lib.genAttrs systems;
  in {
    # NixOS configuration entrypoint
    # Available through 'nixos-rebuild --flake .#your-hostname'
    nixosConfigurations = {
      # FIXME replace with your hostname
      starcraft = nixpkgs.lib.nixosSystem {
        specialArgs = {inherit inputs outputs;};
        modules = [
          (
            # Edit this configuration file to define what should be installed on
            # your system.  Help is available in the configuration.nix(5) man page
            # and in the NixOS manual (accessible by running ‘nixos-help’).

            { inputs, config, pkgs, ... }:

            {
              imports =
                [ # Include the results of the hardware scan.
                  inputs.home-manager.nixosModules.home-manager
                  (
                    # Do not modify this file!  It was generated by ‘nixos-generate-config’
                    # and may be overwritten by future invocations.  Please make changes
                    # to /etc/nixos/configuration.nix instead.
                    { config, lib, pkgs, modulesPath, ... }:

                    {
                      imports =
                        [ (modulesPath + "/installer/scan/not-detected.nix")
                        ];

                      boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" ];
                      boot.initrd.kernelModules = [ ];
                      boot.kernelModules = [ "kvm-intel" ];
                      boot.extraModulePackages = [ ];

                      fileSystems."/" =
                        { device = "/dev/disk/by-uuid/8395d266-34b4-4766-91b3-c65ac1c9d38a";
                          fsType = "ext4";
                        };

                      boot.initrd.luks.devices."luks-30ad9281-c7e2-4abf-ae98-569840c2106e".device = "/dev/disk/by-uuid/30ad9281-c7e2-4abf-ae98-569840c2106e";

                      fileSystems."/boot" =
                        { device = "/dev/disk/by-uuid/62FE-0157";
                          fsType = "vfat";
                          options = [ "fmask=0077" "dmask=0077" ];
                        };

                      swapDevices =
                        [ { device = "/dev/disk/by-uuid/d9186e24-8c67-4e27-82d8-b41dee8c3dd9"; }
                        ];

                      # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
                      # (the default) this is the recommended approach. When using systemd-networkd it's
                      # still possible to use this option, but it's recommended to use it in conjunction
                      # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
                      networking.useDHCP = lib.mkDefault true;
                      # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

                      nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
                      hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
                    }
                  )
                ];

              # Bootloader.
              boot.loader.systemd-boot.enable = true;
              boot.loader.efi.canTouchEfiVariables = true;

              boot.initrd.luks.devices."luks-e99ba237-093b-4b05-96f6-e0fb4d270859".device = "/dev/disk/by-uuid/e99ba237-093b-4b05-96f6-e0fb4d270859";
              networking.hostName = "nixos"; # Define your hostname.
              # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

              # Configure network proxy if necessary
              # networking.proxy.default = "http://user:password@proxy:port/";
              # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

              # Enable networking
              networking.networkmanager.enable = true;

              # Set your time zone.
              time.timeZone = "America/New_York";

              # Select internationalisation properties.
              i18n.defaultLocale = "en_US.UTF-8";

              i18n.extraLocaleSettings = {
                LC_ADDRESS = "en_US.UTF-8";
                LC_IDENTIFICATION = "en_US.UTF-8";
                LC_MEASUREMENT = "en_US.UTF-8";
                LC_MONETARY = "en_US.UTF-8";
                LC_NAME = "en_US.UTF-8";
                LC_NUMERIC = "en_US.UTF-8";
                LC_PAPER = "en_US.UTF-8";
                LC_TELEPHONE = "en_US.UTF-8";
                LC_TIME = "en_US.UTF-8";
              };

              nix.settings = {
                substituters = ["https://hyprland.cachix.org"];
                trusted-substituters = ["https://hyprland.cachix.org"];
                trusted-public-keys = ["hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="];
              };

              # Configure keymap in X11
              services.xserver.xkb = {
                layout = "us";
                variant = "";
              };

              # Enable CUPS to print documents.
              services.printing.enable = true;

              # Enable sound with pipewire.
              services.pulseaudio.enable = false;
              security.rtkit.enable = true;
              services.pipewire = {
                enable = true;
                alsa.enable = true;
                alsa.support32Bit = true;
                pulse.enable = true;
                # If you want to use JACK applications, uncomment this
                #jack.enable = true;

                # use the example session manager (no others are packaged yet so this is enabled by default,
                # no need to redefine it in your config for now)
                #media-session.enable = true;
              };

              home-manager = {
                extraSpecialArgs = { inherit inputs outputs; };
                backupFileExtension = "backup";
                users = {
                  john = (
                    # This is your home-manager configuration file
                    # Use this to configure your home environment (it replaces ~/.config/nixpkgs/home.nix)
                    {
                      inputs,
                      outputs,
                      lib,
                      config,
                      pkgs,
                      ...
                    }: {
                      # You can import other home-manager modules here
                      imports = [
                        # If you want to use modules your own flake exports (from modules/home-manager):
                        # outputs.homeManagerModules.example

                        # Or modules exported from other flakes (such as nix-colors):
                        # inputs.nix-colors.homeManagerModules.default

                        # You can also split up your configuration and import pieces of it here:
                        # ./nvim.nix
                        inputs.zen-browser.homeModules.beta
                      ];

                      nixpkgs = {
                        # You can add overlays here
                        overlays = [
                          # You can also add overlays exported from other flakes:
                          # neovim-nightly-overlay.overlays.default

                          # Or define it inline, for example:
                          # (final: prev: {
                          #   hi = final.hello.overrideAttrs (oldAttrs: {
                          #     patches = [ ./change-hello-to-hi.patch ];
                          #   });
                          # })
                        ];
                        # Configure your nixpkgs instance
                        config = {
                          # Disable if you don't want unfree packages
                          allowUnfree = true;
                        };
                      };

                      # TODO: Set your username
                      home = {
                        username = "john";
                        homeDirectory = "/home/john";
                      };

                      # Add stuff for your user as you see fit:
                      # programs.neovim.enable = true;
                      # home.packages = with pkgs; [ steam ];

                      # Enable home-manager and git
                      programs.home-manager.enable = true;
                      programs.git = {
                        enable = true;
                        extraConfig.user = {
                          name = "chanceycode";
                          email = "139152739+chanceycode@users.noreply.github.com";
                        };
                      };
                      programs.zen-browser = {
                        enable = true;
                        policies = {
                          DisableAppUpdate = true;
                          DisableTelemetry = true;
                          # find more options here: https://mozilla.github.io/policy-templates/
                        };
                      };

                      # Nicely reload system units when changing configs
                      systemd.user.startServices = "sd-switch";

                      # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
                      home.stateVersion = "25.05";
                    }
                  );
                };
              };

              # Enable touchpad support (enabled default in most desktopManager).
              # services.xserver.libinput.enable = true;

              # Define a user account. Don't forget to set a password with ‘passwd’.
              users.users.john = {
                isNormalUser = true;
                description = "john";
                extraGroups = [ "networkmanager" "wheel" ];
                packages = with pkgs; [

              programs.hyprland = {
                enable = true;
                # set the flake package
                package = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.hyprland;
                # make sure to also set the portal package, so that they are in sync
                portalPackage = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.xdg-desktop-portal-hyprland;
              };

              # Install firefox.
              programs.firefox.enable = true;

              # Allow unfree packages
              nixpkgs.config.allowUnfree = true;

              # List packages installed in system profile. To search, run:
              # $ nix search wget
              environment.systemPackages = with pkgs; [
              #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
              #  wget
              ];

              # Some programs need SUID wrappers, can be configured further or are
              # started in user sessions.
              # programs.mtr.enable = true;
              # programs.gnupg.agent = {
              #   enable = true;
              #   enableSSHSupport = true;
              # };

              # List services that you want to enable:

              # Enable the OpenSSH daemon.
              # services.openssh.enable = true;

              # Open ports in the firewall.
              # networking.firewall.allowedTCPPorts = [ ... ];
              # networking.firewall.allowedUDPPorts = [ ... ];
              # Or disable the firewall altogether.
              # networking.firewall.enable = false;

              # This value determines the NixOS release from which the default
              # settings for stateful data, like file locations and database versions
              # on your system were taken. It‘s perfectly fine and recommended to leave
              # this value at the release version of the first install of this system.
              # Before changing this value read the documentation for this option
              # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
              system.stateVersion = "25.05"; # Did you read the comment?
            }
          )
        ];
      };
    };
  };
}